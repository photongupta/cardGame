{"version":3,"sources":["component/Image.js","component/Card.js","component/Cards.js","component/Game.js","card-deck.js","App.js","serviceWorker.js","index.js"],"names":["Img","props","className","side","src","alt","Card","cardDetails","flipCard","id","card","isFlipped","type","checked","onChange","Cards","cards","map","index","key","Game","canFlip","useState","setCards","firstGuess","setFirstGuess","secondGuess","setSecondGuess","useEffect","timeOutId","setTimeout","clearTimeout","updateState","condition","c","newCards","getCards","noOfCards","randomCards","deck","cardType","number","flat","getDeck","length","Math","floor","random","includes","push","getRandomCards","cardList","slice","randomIndex","shuffle","concat","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8a4f526f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Img = function (props) {\n  return (\n    <div className={props.side}>\n      <img className=\"image\" src={props.src} alt={props.side} />\n    </div>\n  );\n};\n\nexport default Img;\n","import React from 'react';\nimport Img from './Image';\n\nconst Card = function ({cardDetails, flipCard, id}) {\n  const {card, isFlipped} = cardDetails;\n  const handleChange = () => !isFlipped && flipCard(id);\n\n  return (\n    <label>\n      <input type=\"checkbox\" checked={isFlipped} onChange={handleChange} />\n      <div className=\"card-holder\">\n        <div className=\"card\">\n          <Img side=\"front\" src={`/PNG/${card}.png`} />\n          <Img side=\"back\" src=\"PNG/purple_back.png\" />\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst Cards = function ({cards, flipCard}) {\n  const cardDetails = cards.map((cardDetails, index) => (\n    <Card\n      key={index}\n      id={index}\n      cardDetails={cardDetails}\n      flipCard={flipCard}\n    />\n  ));\n  return <div className=\"cards-container\">{cardDetails}</div>;\n};\nexport default Cards;\n","import React, {useState, useEffect} from 'react';\nimport Cards from './Cards';\n\nconst Game = function (props) {\n  const cardDetails = props.cards.map((card) => ({\n    card,\n    isFlipped: true,\n    canFlip: true,\n  }));\n  const [cards, setCards] = useState(cardDetails);\n  const [firstGuess, setFirstGuess] = useState(null);\n  const [secondGuess, setSecondGuess] = useState(null);\n\n  useEffect(() => {\n    const timeOutId = setTimeout(() => {\n      setCards((cards) => cards.map((card) => ({...card, isFlipped: false})));\n      clearTimeout(timeOutId);\n    }, 1000);\n  }, []);\n\n  const updateState = function (condition) {\n    setCards((cards) =>\n      cards.map((c) => {\n        if (c.card === firstGuess || c.card === secondGuess) {\n          return {...c, ...condition};\n        }\n        return {...c};\n      })\n    );\n    setFirstGuess(null);\n    setSecondGuess(null);\n  };\n\n  useEffect(() => {\n    if (firstGuess && secondGuess) {\n      if (firstGuess === secondGuess) {\n        return updateState({canFlip: false});\n      }\n\n      const timeOutId = setTimeout(() => {\n        updateState({isFlipped: false});\n        clearTimeout(timeOutId);\n      }, 1000);\n    }\n  }, [firstGuess, secondGuess]);\n\n  const flipCard = function (index) {\n    setCards((cards) => {\n      const newCards = cards.map((card) => ({...card}));\n      newCards[index].isFlipped = true;\n      return newCards;\n    });\n    const card = cards[index].card;\n    !firstGuess ? setFirstGuess(card) : setSecondGuess(card);\n  };\n\n  return <Cards cards={cards} flipCard={flipCard} />;\n};\n\nexport default Game;\n","const getDeck = function () {\n  const cardType = ['H', 'D', 'S', 'C'];\n  const cardNumbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'A', 'K', 'Q', 'J'];\n  return cardNumbers\n    .map((number) => cardType.map((type) => `${number}${type}`))\n    .flat();\n};\n\nconst shuffle = function (cardList) {\n  const cards = cardList.slice();\n  for (let index = 0; index < cards.length; index++) {\n    let randomIndex = Math.floor(Math.random() * cards.length);\n    [cards[randomIndex], cards[index]] = [cards[index], cards[randomIndex]];\n  }\n  return cards;\n};\n\nconst getRandomCards = function (noOfCards) {\n  const deck = getDeck();\n  const cards = [];\n  while (cards.length < noOfCards) {\n    const index = Math.floor(Math.random() * deck.length);\n    if (!cards.includes(deck[index])) cards.push(deck[index]);\n  }\n  return cards;\n};\n\nconst getCards = function (noOfCards) {\n  const randomCards = getRandomCards(noOfCards / 2);\n  return shuffle(randomCards.concat(randomCards));\n};\n\nexport {getCards};\n","import React from 'react';\nimport Game from './component/Game';\nimport {getCards} from './card-deck';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Guess The Matching Cards</h1>\n      <Game cards={getCards(23)} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}